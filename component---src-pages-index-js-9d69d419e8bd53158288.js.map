{"version":3,"sources":["webpack:///./src/components/image.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js"],"names":["components_image","data","_1314558029","react_default","a","createElement","gatsby_image_default","fluid","useStyles","makeStyles","theme","boldText","fontWeight","blackText","__webpack_exports__","classes","layout","seo","title","Box","my","textAlign","Typography","variant","className","style","maxWidth","marginBottom","display","marginLeft","marginRight","m","module","require","default","_ref","location","pageResources","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","flexGrow","titleLink","color","textDecoration","&:hover","Header","siteTitle","Toolbar","gatsby_theme_material_ui","to","header","appBar","background","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","_856328897","Fragment","CssBaseline","layout_HideOnScroll","AppBar","Container","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React"],"mappings":"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","file":"component---src-pages-index-js-9d69d419e8bd53158288.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Image = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"peruvian-python.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid} />\n}\n\nexport default Image\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Typography, Box } from \"@material-ui/core\"\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\nconst useStyles = makeStyles(theme => ({\n  boldText: {\n    fontWeight: 500,\n  },\n  blackText: {\n    fontWeight: 900,\n  },\n}))\n\nconst IndexPage = () => {\n  const classes = useStyles()\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Box my={4} textAlign=\"center\" fontWeight={900}>\n        <Typography variant=\"h1\" className={classes.blackText}>\n          $\\langle P | \\hat C | P \\rangle$\n        </Typography>\n      </Box>\n      <Box my={4} textAlign=\"center\">\n        <Typography variant=\"h2\" className={classes.boldText}>\n          Python Club for Physicists\n        </Typography>\n      </Box>\n      <Box my={4} textAlign=\"center\" fontWeight={900}>\n        <Typography variant=\"h3\" className={classes.blackText}>\n          ¡Próximamente!\n        </Typography>\n      </Box>\n      <Box my={4} textAlign=\"center\">\n        <div\n          style={{\n            maxWidth: `300px`,\n            marginBottom: `1.45rem`,\n            display: `block`,\n            marginLeft: `auto`,\n            marginRight: `auto`,\n          }}>\n          <Image />\n        </div>\n      </Box>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Typography, Toolbar } from \"@material-ui/core\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1,\n  },\n  titleLink: {\n    color: \"#212121\",\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n}))\n\nconst Header = ({ siteTitle }) => {\n  const classes = useStyles()\n\n  return (\n    <Toolbar>\n      <Typography variant=\"h6\" className={classes.title}>\n        <Link to=\"/\" className={classes.titleLink}>\n          {siteTitle}\n        </Link>\n      </Typography>\n    </Toolbar>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport {\n  AppBar,\n  Container,\n  CssBaseline,\n  Slide,\n  useScrollTrigger,\n} from \"@material-ui/core\"\nimport Header from \"./header\"\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    background: \"#ffc82a\",\n  },\n}))\n\nconst HideOnScroll = props => {\n  const { children, window } = props\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined })\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  )\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n}\n\nconst Layout = props => {\n  const classes = useStyles()\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar className={classes.appBar}>\n          <Header siteTitle={data.site.siteMetadata.title} />\n        </AppBar>\n      </HideOnScroll>\n      <Header />\n      <Container>{props.children}</Container>\n    </React.Fragment>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n"],"sourceRoot":""}