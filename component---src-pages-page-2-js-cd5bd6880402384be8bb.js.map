{"version":3,"sources":["webpack:///./src/pages/page-2.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","a","createElement","title","to","m","module","require","default","_ref","location","pageResources","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","useStyles","makeStyles","theme","flexGrow","titleLink","color","textDecoration","&:hover","Header","siteTitle","classes","react_default","Toolbar","Typography","variant","className","gatsby_theme_material_ui","header","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","_856328897","Fragment","CssBaseline","layout_HideOnScroll","AppBar","Container","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React"],"mappings":"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","file":"component---src-pages-page-2-js-cd5bd6880402384be8bb.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage = () => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Typography, Toolbar } from \"@material-ui/core\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1,\n  },\n  titleLink: {\n    color: \"#fafafa\",\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n}))\n\nconst Header = ({ siteTitle }) => {\n  const classes = useStyles()\n\n  return (\n    <Toolbar>\n      <Typography variant=\"h6\" className={classes.title}>\n        <Link to=\"/\" className={classes.titleLink}>\n          {siteTitle}\n        </Link>\n      </Typography>\n    </Toolbar>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport {\n  AppBar,\n  Container,\n  CssBaseline,\n  Slide,\n  useScrollTrigger,\n} from \"@material-ui/core\"\n\nimport Header from \"./header\"\n\nconst HideOnScroll = props => {\n  const { children, window } = props\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined })\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  )\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n}\n\nconst Layout = props => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar color=\"primary\">\n          <Header siteTitle={data.site.siteMetadata.title} />\n        </AppBar>\n      </HideOnScroll>\n      <Header />\n      <Container>{props.children}</Container>\n    </React.Fragment>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n"],"sourceRoot":""}